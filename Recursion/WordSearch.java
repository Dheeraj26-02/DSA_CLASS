public class WordSearch {    public static void main(String[] args) {        char board[][] = {{'A', 'B', 'C', 'E'}, {'S', 'F', 'C', 'S'}, {'A', 'D', 'E', 'E'}};        String word = "ABCCED";        for (int i = 0; i < 3; i++) {            for (int j = 0; j < 4; j++) {                if (board[i][j] == word.charAt(0)) {                    boolean x = search(i, j, board, 3, 4, 0, word);                    if (x == true) {                        System.out.println("TRUE");                        return;                    }                }            }        }        System.out.println("FALSE");    }    public static boolean search(int row, int col, char board[][], int m, int n, int idx, String word) {        if (idx == word.length()) {            return true;        }        if (row < 0 || col < 0 || row >= m || col >= n || board[row][col] != word.charAt(idx)) {            return false;        }        board[row][col] = '#';                     //to show taken character and not take again.        int r[] = {-1, 0, 0, 1};        int c[] = {0, -1, 1, 0};        for (int i = 0; i < r.length; i++) {            boolean ans = search(row + r[i], col + c[i], board, m, n, idx + 1, word);            if (ans) {                return true;            }        }        board[row][col] = word.charAt(idx);            //backtracking        return false;    }}